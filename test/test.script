function Dynamic Get( Object prgCtx, \
					  Dynamic keys, \
					  Integer dataType, \
					  Integer listItemType = dataType, \
					  Dynamic defaultVal = undefined, \						  
					  Boolean isLong = false,\
					  Boolean orderByInt = false)
					  
	Assoc rtn = .InitErrObj("dataCache.Get")		
	
	// *** return value
	Dynamic result			  

	if dataType == ListType && listItemType == ListType
		.GetLogger().Warn("DataCache.Get Caller passed in List dataType without specifying the type of item in the List. A List of lists is not allowed.  List item type assumed to be string.")
		listItemType = StringType 
	end

	if IsDefined(keys) && Type(keys) != ListType
		keys = {keys}
	end
	
	if Type(keys) != ListType
		keys = {keys}
	end
	
	Integer i
	for i=1 to Length(keys)
		// *** Do we need to hash the key (i.e. for unwieldy file paths and such)?
		keys[i] = ._FormatKey(keys[i])	
	end	
	
	// **** which data col to put in
	String dataCol = ""

	// *** Now build the statement
	String stmt
	List subs
	
	// *** do a distinct?
	if dataType==ListType && dataCol != "VAL_LONG" && !orderByInt
		
		// *** SQL server does not allow DISTINCT on NTEXT columns
		if IsDefined(Str.Locate(dataCol, "VAL_STRING_MAX")) && $DataManager.SynCoreInterface.IsMSSQL()
			// do nothing
		else
			dataCol = "DISTINCT " + dataCol
		end	
		
	end
	
	if 0; dataCol = "*"; end;

	switch Length(keys)
		case 1
			stmt = Str.Format('select %1 from datamanager_datacache where job_id=:A1 and job_type=:A2 and key1=:A3', dataCol)
			subs = {._fJobId, ._fJobType, keys[1]}
		end
		
		case 2
			stmt = Str.Format('select %1 from datamanager_datacache where job_id=:A1 and job_type=:A2 and key1=:A3 and key2=:A4', dataCol)
			subs = {._fJobId, ._fJobType, keys[1], keys[2]}
		end
	end
	
	// *** order by int?
	if orderByInt
		stmt += ' order by VAL_INT'
	end
		
	
	RecArray recs = .ExecSql(prgCtx, stmt, subs)
	if IsNotError(recs) && Length(recs)
			
		if dataType != ListType

			if dataType == StringType && Length(RecArray.FieldNames(recs)) > 1
				result = IsDefined(recs[1][1]) ? recs[1][1] : recs[1][2]
				
			else
				result = recs[1][1]
			end
			
			result = _ConvertVal(result, dataType)

		elseif dataType == ListType
	
			// *** did we select a string?  which col is it, the max or the 255 column?
			if listItemType == StringType && Length(RecArray.FieldNames(recs)) > 1
				List valList1 = RecArray.ColumnToList(recs, 1)
				List valList2 = RecArray.ColumnToList(recs, 2)			
				result = {}
			
				Dynamic val
				for i = 1 to Length(valList1)
					val = IsDefined(valList1[i]) ? valList1[i] : valList2[i]
					
					val = Type(val) != listItemType ? _ConvertVal(val, listItemType) : val
					
					if orderByInt
						result = {@result, val}
					else
						result = List.SetAdd(result, val)
					end	
				end			
			else
				List valList = RecArray.ColumnToList(recs, 1)
				result = {}
			
				Dynamic val
				for val in valList
					result = List.SetAdd(result, _ConvertVal(val, listItemType))
				end	
			end
	
			if Length(result) == 1 && IsUndefined(result[1])	
				result = {}
			end
		end			
	
	elseif IsNotError(recs) && !Length(recs) && dataType == ListType
	
		result = {}	

	end

	return result
end

function _ConvertVal(val, dataType)

	if dataType==ListType && Type(val) != ListType
		val = {val}
	elseif dataType== Assoc.AssocType && Type(val) == StringType
			val = Str.StringToValue(val)
	elseif dataType== IntegerType && Type(val) == StringType
		val = Str.StringToInteger(val)
	elseif dataType== RealType && Type(val) == StringType
		val = Str.StringToReal(val)
	end
	
	return val
end
